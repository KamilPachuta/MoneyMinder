@using MoneyMinderContracts.Requests.CurrencyAccounts
@using MoneyMinderContracts.Requests.CurrencyAccounts.Validators
@inject ICurrencyAccountService CurrencyService


<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: scroll; width:  350px; overflow-x:auto ">
                    <MudForm Model="_request" @ref="@_form" Validation="@ValidationAdapter.ValidateValue(_validator)" ValidationDelay="0">
                        <MudTextField @bind-Value="_request.Name" 
                                      For="@(() => _request.Name)" 
                                      Immediate="true" 
                                      Label="Currency Account Name" 
                                      Variant="Variant.Outlined" />
                       
                    </MudForm>
                       

                    

        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudIconButton Icon="@Icons.Material.Filled.DoneOutline" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="Submit"/>
        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="CloseDialog"/>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    IMudDialogInstance MudDialog { get; set; }

    MudForm _form = new();
    
    CreateCurrencyAccountRequest _request = new();
    CreateCurrencyAccountValidator _validator = new();

    private void CloseDialog()
    {
        MudDialog.Close(DialogResult.Cancel());
    }
    
    private async Task Submit()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            var result = await CurrencyService.PostCurrencyAccountAsync(_request);

            MudDialog.Close(DialogResult.Ok(result));
        }
    }
}