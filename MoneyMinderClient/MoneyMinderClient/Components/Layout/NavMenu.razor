@using MoneyMinderClient.Components.Dialogs
@using MoneyMinderClient.Core
@using MoneyMinderClient.Services.Interfaces
@inject IAccountService AccountService
@inject ICurrencyAccountService CurrencyService
@inject ISavingsAccountService SavingsService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager





<AuthorizeView>
    <Authorized>
        @if (!string.IsNullOrWhiteSpace(_name))
        {
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">@_name</MudText>
            </MudDrawerHeader>
        }
        <MudNavMenu>
            <MudNavLink Href="/" Icon="@Icons.Material.Filled.Home">Home</MudNavLink> 
            <MudNavLink Href="/Profile" Icon="@Icons.Material.Filled.AccountCircle">Profile</MudNavLink> 
            <MudNavGroup Title="CurrencyAccounts" Icon="@Icons.Material.Filled.AccountBalance" Expanded="false">
                @foreach (var name in _currencyAccountNames)
                {
                    <MudPaper Outlined="true" Class="px-3 py-1" Elevation="5">
                        <MudNavGroup Title="@name" Icon="@Icons.Material.Filled.AccountBalanceWallet" Expanded="false" Class="">
                            <MudNavLink Href="@CurrencyAccountPathBuilder.Path(name)" Icon="@Icons.Material.Filled.CreditCard">Account</MudNavLink>
                            <MudNavLink Href="@CurrencyAccountPathBuilder.TransactionHistoryPath(name)" Icon="@Icons.Material.Filled.History">Transaction History</MudNavLink>
                            <MudNavLink Href="@CurrencyAccountPathBuilder.MonthlyTransactionsPath(name)" Icon="@Icons.Material.Filled.EventRepeat">Monthly Transactions</MudNavLink>
                            <MudNavLink Href="@CurrencyAccountPathBuilder.BudgetPath(name)" Icon="@Icons.Material.Filled.BarChart">Budget</MudNavLink>
                        </MudNavGroup>
                    </MudPaper>
                }
                <MudNavLink Icon="@Icons.Material.Filled.AddCard" OnClick="CreateCurrencyAccount">Create</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="SavingsAccounts" Icon="@Icons.Material.Filled.Shield" Expanded="false">
                @foreach (var name in _savingsAccountNames)
                {
                    <MudPaper Outlined="true" Class="px-3 py-1" Elevation="5">
                        <MudNavLink Href="@SavingsAccountPathBuilder.Path(name)" Icon="@Icons.Material.Filled.Savings">@name</MudNavLink>
                    </MudPaper>
                }
                <MudNavLink Icon="@Icons.Material.Filled.AddCard" OnClick="CreateSavingsAccount">Create</MudNavLink>
            </MudNavGroup>  
        </MudNavMenu>
    </Authorized>
</AuthorizeView>

@code {
    private string _name = "";
    private List<string> _errorList = new();
    private List<string> _currencyAccountNames = new(); 
    private List<string> _savingsAccountNames = new();



  
    private async Task CreateCurrencyAccount()
    {
        var dialog = await DialogService.ShowAsync<NewCurrencyAccount>();
        
        var result = await dialog.Result;

        var isSucces = new Result();
        
        if (!result.Canceled)
        {
            isSucces  = await dialog.GetReturnValueAsync<Result>();
        }
        
        if (isSucces.Succeeded)
        {
            Snackbar.Add("Submitted creating currency account.");
            NavigationManager.Refresh();
        }
        else
        {
            Snackbar.Add("Saving error!");
            foreach (var error in isSucces.ErrorList)
            {
                Snackbar.Add(error);
            }
        }
    }
    
    private async Task CreateSavingsAccount()
    {
        throw new NotImplementedException();
        
    }
    
    private async Task SetParams()
    {
        var responseCurrencyAccounts = await CurrencyService.GetCurrencyAccountNamesAsync();
        if (responseCurrencyAccounts.Succeeded)
        {
            _currencyAccountNames = responseCurrencyAccounts.Response.Names.ToList();
        }
        else
        {
            _errorList = responseCurrencyAccounts.ErrorList;
        }


        var responseSavings = await SavingsService.GetSavingsAccountNames();

        if (responseSavings.Succeeded)
        {
            _savingsAccountNames = responseSavings.Response.Names.ToList();
        }
        else
        {
            _errorList = responseSavings.ErrorList;
        }
        
        _name = await AccountService.GetNameAsync();
        
    }
    
    protected override async Task OnInitializedAsync()
    {
        await SetParams();
    }

    private static class CurrencyAccountPathBuilder
    {
        public static string Path(string name) => $"/CurrencyAccount/{name}";

        public static string TransactionHistoryPath(string name) => $"/CurrencyAccount/{name}/TransactionHistory";
            
        public static string MonthlyTransactionsPath(string name) => $"/CurrencyAccount/{name}/MonthlyTransactions";
            
        public static string BudgetPath(string name) => $"/CurrencyAccount/{name}/Budget";
            
    }    
    
    private static class SavingsAccountPathBuilder
    {
        public static string Path(string name) => $"/SavingsAccount/{name}";
    }

}