@page "/"
@using MoneyMinderContracts.Responses.CurrencyAccounts
@using MoneyMinderContracts.Responses.SavingsAccounts
@inject ICurrencyAccountService CurrencyService
@inject ISavingsAccountService SavingsService
@inherits BasePage



@if (_currencySucceded)
    {
        
            <MudPaper Elevation="2">
                <MudGrid>
                    <MudItem xs="12" sm="2">
                        <MudList T="string" @bind-SelectedItem="currencySelectedValue" SelectionMode="SelectionMode.SingleSelection" SelectedValueChanged="OnCurrencySelectedValueChanged">
                            <MudListSubheader>
                                <MudPaper Elevation="0" Class="mx-1 my-0 px-1 py-0 align-start d-flex">
                                    <MudPaper Elevation="0" Class="align-start d-flex">
                                        <MudText Typo="Typo.h5">Currency Accounts</MudText>
                                    </MudPaper>
                                    <MudSpacer/>
                                    <MudPaper Elevation="0" Class="align-end d-flex">
                                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="CreateCurrencyAccount"></MudIconButton>
                                    </MudPaper>
                                </MudPaper>
                            </MudListSubheader>
                            @if (_currencyAccountNames.Any())
                            {
                                @foreach (var name in _currencyAccountNames)
                                {
                                    <MudListItem Text="@name"/>
                                }
                            }
                        </MudList>
                    </MudItem>
                    @if (_currencyDetails is not null)
                    {
                        <MudItem xs="12" sm="9">
                            <MudPaper Width="100%" Class="px-4 py-4" Elevation="3">
                                <MudText Typo="Typo.h4">@_currencyDetails.Name</MudText>
                                <MudGrid>
                                    <MudItem xs="12" sm="6">
                                        <MudItem xs="12" sm="6">
                                            @if (_currencyDetails.Balances is not null && _currencyDetails.Balances.Any())
                                            {
                                                <MudPaper Class="px-4 py-4" Elevation="2">
                                                    <MudText Typo="Typo.h6">Balances:</MudText>
                                                    @foreach (var balance in _currencyDetails.Balances)
                                                    {
                                                        if (balance.Amount != 0)
                                                        {
                                                            <MudText Typo="Typo.body1">@balance.Amount @balance.Currency</MudText>
                                                        }
                                                    }
                                                </MudPaper>
                                            }
                                        </MudItem>
                                    </MudItem>
                                    @if (_currencyDetails.Transactions is not null && _currencyDetails.Transactions.Any())
                                    {
                                        <MudItem xs="12" sm="6">
                                            <MudContainer Style="max-height: 600px; overflow-y: scroll;">
                                                <MudText Typo="Typo.h5">Transactions history</MudText>

                                                <MudTable T="CurrencyTransactionDto" Items="@_currencyDetails.Transactions" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTableTransactions"
                                                          RowClass="cursor-pointer" Class="d-inline">
                                                    <HeaderContent>
                                                        <MudTh>Name</MudTh>
                                                        <MudTh>Date</MudTh>
                                                        <MudTh>Amount</MudTh>
                                                        <MudTh>Currency</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate>
                                                        <MudTd DataLabel="Name">@context.Name</MudTd>
                                                        <MudTd DataLabel="Date">@context.Date.ToString("dd-MM-yyyy")</MudTd>
                                                        <MudTd DataLabel="Amount">@context.Amount</MudTd>
                                                        <MudTd DataLabel="Currency">@context.Currency</MudTd>
                                                    </RowTemplate>
                                                </MudTable>
                                            </MudContainer>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
       
    }
@if(_savingsSucceded)
{
    <MudItem xs="12" sm="7">
        <MudPaper Elevation="2" Class="px-4 py-4 align-start d-flex">
            <MudStack>
                <MudText Typo="Typo.h5">Savings</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="CreateSavingsAccount"></MudIconButton>
            </MudStack>

            <MudTable Items="@_savingsDetails.SavingsAccounts" Dense="true" Bordered="true" Elevation="0">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Actual Amount</MudTh>
                    <MudTh>Planned Amount</MudTh>
                    <MudTh>Currency</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Actual Amount">@context.CurrentAmount</MudTd>
                    <MudTd DataLabel="Planned Amount">@context.PlannedAmount</MudTd>
                    <MudTd DataLabel="Currency">@context.Currency</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
    }
    




@code {
    //MudListItem selectedItem;
    string currencySelectedValue = String.Empty;
    // string savingsSelectedValue = String.Empty;
    
    private bool _savingsSucceded = false;
    private bool _currencySucceded = false;
    private List<string> _errors;
    
    private MudTable<CurrencyTransactionDto> mudTableTransactions;

    
    private List<string> _currencyAccountNames = new(); 
    private List<string> _savingsAccountNames = new();
    private GetCurrencyAccountDetailsResponse _currencyDetails;
    private GetSavingsAccountsDetailsResponse _savingsDetails;



    private async Task GetCurrencyAccountDetails(string name)
    {
        var scopeResult = await CurrencyService.GetCurrencyAccountDetailsAsync(name);
        _currencyDetails = scopeResult.Response;
    }

    private async Task SetCurrencyParams()
    {
        var responseCurrency = await CurrencyService.GetCurrencyAccountNamesAsync();

        
        if (!responseCurrency.Succeeded)
        {
            _currencySucceded = false;
            _errors = responseCurrency.ErrorList;
            return;
        }

        if (responseCurrency.Response.Names.Any())
        {
            _currencyAccountNames = responseCurrency.Response.Names.ToList();
            var name = _currencyAccountNames.First();
            await GetCurrencyAccountDetails(name);
            currencySelectedValue = name;
        }
        
        _currencySucceded = true;
    }
    
    private async Task SetSavingsParams()
    {
        var responseSavings = await SavingsService.GetSavingsAccountNames();
        
        if (!responseSavings.Succeeded)
        {
            _savingsSucceded = false;
            _errors = responseSavings.ErrorList;
            return;
        }
        
        if(responseSavings.Response is not null)
        {
            _savingsAccountNames = responseSavings.Response.Names.ToList();
            // var name = _savingsAccountNames.First();
            var scopeResult = await SavingsService.GetSavingsAccountsDetailsAsync();
            _savingsDetails = scopeResult.Response;
            // savingsSelectedValue = name;
        }
        
        _savingsSucceded = true;
    }
    
    
    protected async override Task OnParametersSetAsync()
    {
        await SetCurrencyParams();
        await SetSavingsParams();
}
    
    private async Task OnCurrencySelectedValueChanged(object value)
    {
        currencySelectedValue = (string)value;
        await GetCurrencyAccountDetails(currencySelectedValue);
    }

    private async Task CreateCurrencyAccount()
        => await ShowDialogAsync<CreateCurrencyAccountDialog>("Create Currency Account");

    private async Task CreateSavingsAccount()
        => await ShowDialogAsync<CreateSavingsAccountDialog>("Create Savings Account");
}
