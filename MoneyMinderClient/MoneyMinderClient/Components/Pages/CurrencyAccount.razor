@page "/CurrencyAccount/{name}"
@using MoneyMinderContracts.Responses.CurrencyAccounts
@inject ICurrencyAccountService CurrencyService
@inherits BasePage

<MudGrid>
    <MudItem xs="12" sm="4">
            <MudPaper Elevation="2" Class="mx-4 my-4 px-4 py-4">
                <MudText Typo="Typo.h4" Class="px-2 py-2">@Name</MudText>
                 @if (_succeded)
                {
                    <MudPaper Width="300px" Elevation="2">
                        <MudText Typo="Typo.h6" Class="px-2 py-2">Available funds</MudText>
                        <MudList T="string">
                            @foreach (var balance in _balances)
                            {
                                <MudListItem Text="@($"{balance.Amount} {balance.Currency}")" Icon="@Icons.Material.Filled.AccountBalanceWallet" />
                            }
                        </MudList>
                    </MudPaper>

                }
                </MudPaper>
        </MudItem>
        
    <MudItem xs="12" sm="8">
        <MudPaper Elevation="2" Class="mx-4 my-4 px-4 py-4">
            <MudTooltip Text="Add new transaction">
                          <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddTransaction"></MudIconButton>
            </MudTooltip>  
             <MudTooltip Text="Add multiple transactions using import CSV.">
                 <MudIconButton Icon="@Icons.Material.Filled.UploadFile" OnClick="UploadFile"></MudIconButton>
             </MudTooltip>  
            <MudTooltip Text="Currency Exchange">
                <MudIconButton Icon="@Icons.Material.Filled.CurrencyExchange" OnClick="ConvertCurrency"></MudIconButton>
            </MudTooltip>  
            <MudTooltip Text="Edit Currency Account Name">
                <MudIconButton Icon="@Icons.Material.Filled.EditNote" OnClick="EditCurrencyAccountName"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Transaction History">
            <MudIconButton Icon="@Icons.Material.Filled.History" OnClick="TransactionHistory"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Budget">
                <MudIconButton Icon="@Icons.Material.Filled.BarChart" OnClick="Budget"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Remove Currency Account">
                <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" OnClick="DeleteCurrencyAccount"></MudIconButton>
            </MudTooltip>
        </MudPaper>
    </MudItem>
    
    <MudItem xs="12" sm="8">
        
        <MudPaper Elevation="2" Class="mx-4 my-4 px-4 py-4">
            <MudStack>
                        <MudFab Label="Add new transaction" Icon="@Icons.Material.Filled.Add" OnClick="AddTransaction"></MudFab>
                                    <MudFab Label="Currency Exchange" Icon="@Icons.Material.Filled.CurrencyExchange" OnClick="ConvertCurrency"/>
                                    <MudFab Label="Edit Currency Account Name" Icon="@Icons.Material.Filled.EditNote" OnClick="EditCurrencyAccountName"/>
                                    <MudFab Label="Transaction History" Icon="@Icons.Material.Filled.History" OnClick="TransactionHistory"/>
                                    <MudFab Label="Budget" Icon="@Icons.Material.Filled.BarChart" OnClick="Budget"/>
                                    <MudFab Label="Remove Currency Account" Icon="@Icons.Material.Filled.DeleteForever" OnClick="DeleteCurrencyAccount"/>
                    </MudStack>
        </MudPaper>
    </MudItem>
    
    
   
</MudGrid>




@code {
    [Parameter] 
    public string Name { get; set; }
    [CascadingParameter]
    public Guid CurrencyAccountId { get; set; }
    
    private bool _succeded = false;
    private DialogParameters _parameters = new DialogParameters();

    private List<string> _errors;
    private GetCurrencyAccountNamesResponse _response;
    private List<BalanceDto> _balances;



    private async Task AddTransaction()
        => await ShowDialogAsync<AddCurrencyTransactionDialog>("Add Transaction", _parameters);
    
    private async Task UploadFile()
    {
        throw new NotImplementedException();
    }
    private async Task ConvertCurrency()
    {
        throw new NotImplementedException();
    }
    private async Task EditCurrencyAccountName()
        => await ShowDialogAsync<EditCurrencyAccountNameDialog>("Edit Currency Account", _parameters);

    private async Task TransactionHistory()
    {
        NavigationManager.NavigateTo(PathBuilder.CurrencyTransactionHistoryPath(Name));
    }
    
    private async Task Budget()
    {
        NavigationManager.NavigateTo(PathBuilder.BudgetPath(Name));
    }

    private async Task DeleteCurrencyAccount()
        => await ShowDialogAsync<DeleteCurrencyAccountDialog>("Delete Currency Account", _parameters);

    protected override async Task OnParametersSetAsync()
    {
        await SetParams();
    }
    
    private async Task SetParams()
    {
        var firstResult = await CurrencyService.GetIdByNameAsync(Name);
        if (!firstResult.Succeeded)
        {
            _succeded = false;
            _errors = firstResult.ErrorList;
            return;
        }

        CurrencyAccountId = firstResult.Response.Id;

        var secondResult = await CurrencyService.GetCurrencyAccountBalancesAsync(CurrencyAccountId);

        if (!secondResult.Succeeded)
        {
            _succeded = false;
            _errors = secondResult.ErrorList;
            return;
        }

        _balances = secondResult.Response.Balances.ToList();

        _parameters = new DialogParameters()
        {
            { "CurrencyAccountId", CurrencyAccountId }
        };
        

        _succeded = true;
    }

}